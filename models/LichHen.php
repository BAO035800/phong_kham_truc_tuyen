<?php
require_once __DIR__ . '/../config/Database.php';
require_once __DIR__ . '/../services/MailerService.php';

class LichHen
{
    private PDO $conn;

    public function __construct()
    {
        $this->conn = (new Database())->getConnection();
    }

    /**
     * üü¢ ƒê·∫∑t l·ªãch h·∫πn (b·ªánh nh√¢n)
     * - T·∫°o l·ªãch h·∫πn ·ªü tr·∫°ng th√°i CHO_XAC_NHAN
     * - Sinh token v√† g·ª≠i mail x√°c nh·∫≠n
     */
    public function datLich($data)
    {
        $this->conn->beginTransaction();
        try {
            $ma_benh_nhan = $data['ma_benh_nhan'];
            $ma_bac_si = $data['ma_bac_si'];
            $ma_dich_vu = $data['ma_dich_vu'];
            $ma_phong     = null; 
            if (!empty($data['ngay']) && !empty($data['gio'])) {
                $thoi_gian = $data['ngay'] . ' ' . $data['gio'] . ':00';
            } else {
                throw new Exception("Thi·∫øu ng√†y ho·∫∑c gi·ªù kh√°m.");
            }
            $ghi_chu = $data['ghi_chu'] ?? '';

            // üîç L·∫•y th√¥ng tin b·ªánh nh√¢n
            $stmt = $this->conn->prepare("SELECT email, ho_ten FROM benhnhan WHERE ma_benh_nhan = ?");
            $stmt->execute([$ma_benh_nhan]);
            $benhnhan = $stmt->fetch(PDO::FETCH_ASSOC);
            if (!$benhnhan) {
                throw new Exception("Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n v·ªõi m√£ $ma_benh_nhan");
            }

            // üîç Ki·ªÉm tra l·ªãch tr·ªëng
            $sql = "SELECT * FROM lichtrong 
                WHERE ma_bac_si = ? 
                  AND thoi_gian_bat_dau <= ? 
                  AND thoi_gian_ket_thuc > ? 
                  AND trang_thai = 'TRONG'";
            $stmt = $this->conn->prepare($sql);
            $stmt->execute([$ma_bac_si, $thoi_gian, $thoi_gian]);
            $lichTrong = $stmt->fetch(PDO::FETCH_ASSOC);
            if (!$lichTrong) {
                throw new Exception("Kh√¥ng c√≥ l·ªãch tr·ªëng ph√π h·ª£p ho·∫∑c ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t.");
            }

            // üß© Sinh token x√°c nh·∫≠n email
            $token = bin2hex(random_bytes(32));

            // üóÇÔ∏è Th√™m l·ªãch m·ªõi v·ªõi tr·∫°ng th√°i CHO_XAC_NHAN_EMAIL
            $sql = "INSERT INTO lichhen 
                (ma_benh_nhan, ma_bac_si, ma_dich_vu, thoi_gian, trang_thai, ghi_chu, xac_nhan_token)
                VALUES (?, ?, ?, ?, 'CHO_XAC_NHAN_EMAIL', ?, ?)";
            $stmt = $this->conn->prepare($sql);
            $stmt->execute([$ma_benh_nhan, $ma_bac_si, $ma_dich_vu, $thoi_gian, $ghi_chu, $token]);

            $ma_lich_hen = $this->conn->lastInsertId();
            $this->conn->commit();

            // ‚úâÔ∏è G·ª≠i mail x√°c nh·∫≠n
            if (!empty($benhnhan['email'])) {
                MailerService::sendAppointmentConfirmation(
                    $benhnhan['email'],
                    $benhnhan['ho_ten'],
                    $token
                );
            }

            return [
                'status' => 'pending',
                'message' => 'L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n.',
                'ma_lich_hen' => $ma_lich_hen
            ];
        } catch (Exception $e) {
            $this->conn->rollBack();
            throw new Exception("L·ªói khi ƒë·∫∑t l·ªãch: " . $e->getMessage());
        }
    }



    /**
     * üü° X√°c nh·∫≠n l·ªãch qua email
     */
    public function xacNhanQuaEmail($token)
    {
        $stmt = $this->conn->prepare("
        SELECT * FROM lichhen 
        WHERE xac_nhan_token = ? AND (trang_thai IS NULL OR trang_thai = 'CHO_XAC_NHAN_EMAIL')
    ");
        $stmt->execute([$token]);
        $lich = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$lich) {
            throw new Exception("Li√™n k·∫øt x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.");
        }

        $this->conn->beginTransaction();
        try {
            // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i sang ch·ªù b√°c sƒ© x√°c nh·∫≠n
            $this->conn->prepare("
            UPDATE lichhen 
            SET trang_thai = 'CHO_XAC_NHAN',
                email_xac_nhan_at = NOW()
            WHERE ma_lich_hen = ?
        ")->execute([$lich['ma_lich_hen']]);

            $this->conn->commit();

            return ['status' => 'success', 'message' => 'ƒê√£ x√°c nh·∫≠n qua email. Ch·ªù b√°c sƒ© duy·ªát l·ªãch h·∫πn.'];
        } catch (Exception $e) {
            $this->conn->rollBack();
            throw new Exception("L·ªói khi x√°c nh·∫≠n l·ªãch: " . $e->getMessage());
        }
    }


    /**
     * üî¥ H·ªßy l·ªãch
     */
    public function huyLich($ma_lich_hen)
    {
        $this->conn->beginTransaction();
        try {
            $stmt = $this->conn->prepare("SELECT * FROM lichhen WHERE ma_lich_hen = ?");
            $stmt->execute([$ma_lich_hen]);
            $lich = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$lich) {
                throw new Exception("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn.");
            }

            $this->conn->prepare("UPDATE lichhen SET trang_thai = 'DA_HUY' WHERE ma_lich_hen = ?")
                ->execute([$ma_lich_hen]);

            $this->conn->prepare("
                UPDATE lichtrong 
                SET trang_thai = 'TRONG'
                WHERE ma_bac_si = ? 
                  AND thoi_gian_bat_dau <= ? 
                  AND thoi_gian_ket_thuc > ?
            ")->execute([$lich['ma_bac_si'], $lich['thoi_gian'], $lich['thoi_gian']]);

            $this->conn->commit();

            return ['status' => 'success', 'message' => 'ƒê√£ h·ªßy l·ªãch th√†nh c√¥ng.'];
        } catch (Exception $e) {
            $this->conn->rollBack();
            throw new Exception("L·ªói khi h·ªßy l·ªãch: " . $e->getMessage());
        }
    }

    /**
     * üîπ L·∫•y danh s√°ch l·ªãch h·∫πn theo b·ªánh nh√¢n
     */
    public function getByBenhNhan($ma_benh_nhan)
    {
        $stmt = $this->conn->prepare("
        SELECT lh.*, 
               bs.ho_ten AS ten_bac_si, 
               dv.ten_dich_vu, 
               p.ten_phong
        FROM lichhen lh
        JOIN bacsi bs ON lh.ma_bac_si = bs.ma_bac_si
        JOIN dichvu dv ON lh.ma_dich_vu = dv.ma_dich_vu
        WHERE lh.ma_benh_nhan = ?
          AND lh.trang_thai <> 'CHO_XAC_NHAN_EMAIL'
        ORDER BY lh.thoi_gian DESC
    "); 
    // JOIN phong p ON lh.ma_phong = p.ma_phong
        $stmt->execute([$ma_benh_nhan]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }


    /**
     * üîµ B√°c sƒ© ho·∫∑c admin x√°c nh·∫≠n th·ªß c√¥ng
     */
    public function xacNhanLich($ma_lich_hen)
    {
        // üîç L·∫•y th√¥ng tin l·ªãch h·∫πn ƒë·ªÉ bi·∫øt b√°c sƒ© v√† th·ªùi gian
        $stmt = $this->conn->prepare("
        SELECT ma_bac_si, thoi_gian 
        FROM lichhen 
        WHERE ma_lich_hen = ? AND trang_thai = 'CHO_XAC_NHAN'
    ");
        $stmt->execute([$ma_lich_hen]);
        $lich = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$lich) {
            return [
                'status' => 'error',
                'message' => 'Kh√¥ng th·ªÉ x√°c nh·∫≠n. L·ªãch kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n.'
            ];
        }

        $this->conn->beginTransaction();
        try {
            // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn
            $stmt1 = $this->conn->prepare("
            UPDATE lichhen 
            SET trang_thai = 'DA_XAC_NHAN', 
                thoi_gian_xac_nhan = NOW()
            WHERE ma_lich_hen = ?
        ");
            $stmt1->execute([$ma_lich_hen]);

            // ‚úÖ ƒê·ªìng th·ªùi c·∫≠p nh·∫≠t l·ªãch tr·ªëng c·ªßa b√°c sƒ© ‚Üí "DA_DAT"
            $stmt2 = $this->conn->prepare("
            UPDATE lichtrong 
            SET trang_thai = 'DA_DAT'
            WHERE ma_bac_si = ? 
              AND thoi_gian_bat_dau <= ? 
              AND thoi_gian_ket_thuc > ?
        ");
            $stmt2->execute([$lich['ma_bac_si'], $lich['thoi_gian'], $lich['thoi_gian']]);

            $this->conn->commit();

            return [
                'status' => 'success',
                'message' => '‚úÖ B√°c sƒ© ƒë√£ x√°c nh·∫≠n l·ªãch h·∫πn th√†nh c√¥ng.'
            ];
        } catch (Exception $e) {
            $this->conn->rollBack();
            throw new Exception("L·ªói khi x√°c nh·∫≠n l·ªãch: " . $e->getMessage());
        }
    }
}
