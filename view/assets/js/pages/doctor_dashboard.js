/* ============================
   üë®‚Äç‚öïÔ∏è Doctor Dashboard Logic (SPA Safe, Auto Reload on Route)
   ============================ */

   async function setupDoctorDashboard() {
    console.log("üöÄ doctor_dashboard.js initializing...");
  
    /* üïê Helper: ƒê·ª£i ph·∫ßn t·ª≠ xu·∫•t hi·ªán (tr√°nh null) */
    async function waitForElement(selector, timeout = 3000) {
      return new Promise((resolve) => {
        const start = Date.now();
        (function check() {
          const el = document.querySelector(selector);
          if (el) return resolve(el);
          if (Date.now() - start >= timeout) return resolve(null);
          requestAnimationFrame(check);
        })();
      });
    }
  
    // ƒê·ª£i c√°c ph·∫ßn t·ª≠ render xong tr∆∞·ªõc khi ch·∫°y
    const [
      tableBody,
      totalCount,
      arrivedCount,
      doneCount,
      dateFilter,
      reloadBtn,
      docInfo,
    ] = await Promise.all([
      waitForElement("#doctor-schedule"),
      waitForElement("#total-count"),
      waitForElement("#arrived-count"),
      waitForElement("#done-count"),
      waitForElement("#dateFilter"),
      waitForElement("#reloadBtn"),
      waitForElement("#doc-info"),
    ]);
  
    if (!tableBody || !docInfo) {
      console.warn("‚ö†Ô∏è Trang b√°c sƒ© ch∆∞a render xong, th·ª≠ l·∫°i sau.");
      return;
    }
  
    let maBacSi = null;
    let selectedDate = new Date().toISOString().split("T")[0];
    let session = null;
  
    /* 1Ô∏è‚É£ L·∫•y session */
    try {
      session = await apiRequest(`${API_BASE_URL}?path=session`, "GET");
      console.log("üßæ Session:", session);
  
      const role = (session.user?.vai_tro || "").toLowerCase();
      if (!session.logged_in || !["doctor", "admin"].includes(role)) {
        showToast("‚ö†Ô∏è Ch·ªâ b√°c sƒ© m·ªõi ƒë∆∞·ª£c truy c·∫≠p trang n√†y", "warning");
        window.location.hash = "#/login";
        return;
      }
  
      maBacSi = session.user.ma_bac_si || session.user.id;
      if (dateFilter) dateFilter.value = selectedDate;
      updateHeader(session.user.name || session.user.ho_ten || "Kh√¥ng r√µ", selectedDate);
    } catch (err) {
      console.error("‚ùå Kh√¥ng th·ªÉ l·∫•y session:", err);
      return;
    }
  
    /* 2Ô∏è‚É£ C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ */
    function updateHeader(hoTen, date) {
      const d = new Date(date);
      docInfo.textContent = `BS. ${hoTen} ¬∑ ${d.toLocaleDateString("vi-VN", {
        weekday: "long",
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      })}`;
    }
  
    /* 3Ô∏è‚É£ G·ªçi API l·∫•y l·ªãch b√°c sƒ© */
    async function fetchDoctorSchedule(date = selectedDate) {
      try {
        const data = await apiRequest(
          `${API_BASE_URL}?path=lichhen&action=listByBacSi&ma_bac_si=${maBacSi}&ngay=${date}`,
          "GET"
        );
        console.log("üìÖ L·ªãch h·∫πn:", data);
        renderSchedule(data);
      } catch (err) {
        console.error("‚ùå L·ªói t·∫£i l·ªãch b√°c sƒ©:", err);
        tableBody.innerHTML = `
          <tr><td colspan="5" class="text-center py-6 text-gray-500">Kh√¥ng th·ªÉ t·∫£i l·ªãch h·∫πn.</td></tr>`;
      }
    }
  
    /* 4Ô∏è‚É£ Render danh s√°ch l·ªãch */
    function renderSchedule(list) {
      if (!list || list.length === 0) {
        tableBody.innerHTML = `
          <tr><td colspan="5" class="text-center py-6 text-gray-500">Kh√¥ng c√≥ l·ªãch h·∫πn trong ng√†y.</td></tr>`;
        totalCount.textContent = 0;
        arrivedCount.textContent = 0;
        doneCount.textContent = 0;
        return;
      }
  
      totalCount.textContent = list.length;
      arrivedCount.textContent = list.filter((s) => s.trang_thai === "DA_XAC_NHAN").length;
      doneCount.textContent = list.filter((s) => s.trang_thai === "HOAN_THANH").length;
  
      tableBody.innerHTML = list
        .map(
          (s) => `
          <tr class="hover:bg-gray-50">
            <td class="px-4 py-3">${s.gio_hen || "-"}</td>
            <td class="px-4 py-3">
              <div class="font-medium">${s.ten_benh_nhan}</div>
              <div class="text-xs text-gray-500">${s.ghi_chu || ""}</div>
            </td>
            <td class="px-4 py-3">${s.ten_dich_vu}</td>
            <td class="px-4 py-3">${renderStatusBadge(s.trang_thai)}</td>
            <td class="px-4 py-3 text-right">${renderActions(s)}</td>
          </tr>`
        )
        .join("");
    }
  
    /* 5Ô∏è‚É£ Badge tr·∫°ng th√°i */
    function renderStatusBadge(st) {
      const map = {
        CHO_XAC_NHAN: "bg-amber-50 text-amber-700 ring-amber-200",
        DA_XAC_NHAN: "bg-blue-50 text-blue-700 ring-blue-200",
        HOAN_THANH: "bg-emerald-50 text-emerald-700 ring-emerald-200",
        DA_HUY: "bg-red-50 text-red-700 ring-red-200",
      };
      const name = {
        CHO_XAC_NHAN: "Ch·ªù x√°c nh·∫≠n",
        DA_XAC_NHAN: "ƒê√£ x√°c nh·∫≠n",
        HOAN_THANH: "Ho√†n t·∫•t",
        DA_HUY: "ƒê√£ h·ªßy",
      };
      return `<span class="inline-flex items-center gap-1 rounded-full px-2.5 py-1 text-xs font-medium ring-1 ${
        map[st] || "bg-gray-100 text-gray-600"
      }"><span class="size-1.5 rounded-full bg-current"></span>${name[st] || st}</span>`;
    }
  
    /* 6Ô∏è‚É£ H√†nh ƒë·ªông 
         - ·ªû "Ch·ªù x√°c nh·∫≠n": c√≥ H·ªßy (b√™n tr√°i) v√† X√°c nh·∫≠n (b√™n ph·∫£i)
         - Qua "ƒê√£ x√°c nh·∫≠n": ch·ªâ c√≤n Ho√†n t·∫•t
    */
    function renderActions(s) {
      // Ch·ªù x√°c nh·∫≠n: hi·ªÉn th·ªã H·ªßy (tr√°i) + X√°c nh·∫≠n (ph·∫£i)
      if (s.trang_thai === "CHO_XAC_NHAN") {
        return `
          <div class="flex gap-2 justify-end">
            <button class="action-btn bg-red-500 text-white px-3 py-1.5 text-xs rounded-lg"
                    data-id="${s.ma_lich_hen}" data-act="DA_HUY">
              H·ªßy
            </button>
            <button class="action-btn bg-sky-500 text-white px-3 py-1.5 text-xs rounded-lg"
                    data-id="${s.ma_lich_hen}" data-act="DA_XAC_NHAN">
              X√°c nh·∫≠n
            </button>
          </div>`;
      }
  
      // ƒê√£ x√°c nh·∫≠n: ch·ªâ c√≥ "Ho√†n t·∫•t"
      if (s.trang_thai === "DA_XAC_NHAN") {
        return `
          <button class="action-btn bg-emerald-600 text-white px-3 py-1.5 text-xs rounded-lg"
                  data-id="${s.ma_lich_hen}" data-act="HOAN_THANH">
            Ho√†n t·∫•t
          </button>`;
      }
  
      // Ho√†n t·∫•t ho·∫∑c ƒë√£ h·ªßy ‚Üí kh√¥ng c√≥ n√∫t thao t√°c
      if (s.trang_thai === "HOAN_THANH") {
        return `<span class="text-xs text-gray-500">‚úÖ ƒê√£ xong</span>`;
      }
  
      if (s.trang_thai === "DA_HUY") {
        return `<span class="text-xs text-gray-400">‚ùå ƒê√£ h·ªßy</span>`;
      }
  
      return "";
    }
  
    /* 7Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i */
    tableBody.addEventListener("click", async (e) => {
      const btn = e.target.closest(".action-btn");
      if (!btn) return;
  
      const ma_lich = btn.dataset.id;
      const act = btn.dataset.act;
  
      if (act === "DA_HUY") {
        showToast("‚õî ƒêang h·ªßy l·ªãch h·∫πn...", "warning");
      }
  
      try {
        const res = await apiRequest(`${API_BASE_URL}?path=lichhen&action=updateTrangThai`, "POST", {
          ma_lich_hen: ma_lich,
          trang_thai: act,
        });
  
        if (act === "DA_HUY") {
          showToast(res.message || "L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy!", "danger");
        } else if (act === "HOAN_THANH") {
          showToast("‚úÖ ƒê√£ ho√†n t·∫•t kh√°m!", "success");
        } else if (act === "DA_XAC_NHAN") {
          showToast("üìã ƒê√£ x√°c nh·∫≠n l·ªãch h·∫πn!", "info");
        }
  
        fetchDoctorSchedule(selectedDate);
      } catch (err) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", err);
        showToast("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch", "error");
      }
    });
  
    /* 8Ô∏è‚É£ S·ª± ki·ªán ng√†y + reload */
    dateFilter?.addEventListener("change", (e) => {
      selectedDate = e.target.value;
      updateHeader(session.user.name, selectedDate);
      fetchDoctorSchedule(selectedDate);
    });
  
    reloadBtn?.addEventListener("click", () => fetchDoctorSchedule(selectedDate));
  
    /* üöÄ Kh·ªüi t·∫°o ban ƒë·∫ßu */
    fetchDoctorSchedule(selectedDate);
  }
  
  /* ============================================
     ‚úÖ Lu√¥n kh·ªüi t·∫°o l·∫°i m·ªói khi v√†o route
     ============================================ */
  function initDoctorDashboardSPA() {
    if (window.location.hash === "#/doctor-dashboard") {
      setupDoctorDashboard();
    }
  }
  
  window.addEventListener("DOMContentLoaded", initDoctorDashboardSPA);
  window.addEventListener("hashchange", initDoctorDashboardSPA);
  